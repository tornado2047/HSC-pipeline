
#' analysis via Seurat
#' @title Seurat analysis
#' @description 
#' @return Writes the output in the file name stored in: <>
#' @examples 

#' Data input and reprocessing
rt=read.table("Young.txt",sep="\t",header=T,check.names=F)
rt <- rt[,-2]
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data_young=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data_young=avereps(data_young)

qt=read.table("Old.txt",sep="\t",header=T,check.names=F)
qt <- qt[,-2]
qt=as.matrix(qt)
rownames(qt)=qt[,1]
exp1=qt[,2:ncol(qt)]
dimnames=list(rownames(exp1),colnames(exp1))
data_old=matrix(as.numeric(as.matrix(exp1)),nrow=nrow(exp1),dimnames=dimnames)
data_old=avereps(data_old)

#' Creat Seurat Objects and Merge
Y <- CreateSeuratObject(counts = data_young , project = "Young")
O <- CreateSeuratObject(counts = data_old, project = "Old")
hsc <- merge(Y, y = O, add.cell.ids = c("Young", "Old"), project = "hsc")

#' Read annotation data
annotations <- read.csv("annotation.csv")

#' ID match
match_index <- match(annotations$Cell.id, colnames(hsc))
if (!any(is.na(match_index))) {
  hsc$Group <- annotations$Group[match_index]
  hsc$Mito.dist <- annotations$Mtio.dist[match_index]
} else {
  cat("ID not found\n")
}

hsc[["percent.mt"]] <- PercentageFeatureSet(object = hsc, pattern = "^mt-")
pdf(file="featureViolin.pdf",width=10,height=6)           
VlnPlot(object = hsc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()

hsc <- subset(hsc, subset = nFeature_RNA > 200 & percent.mt < 5)
hsc <- NormalizeData(object = hsc, normalization.method = "LogNormalize", scale.factor = 10000)
hsc <- FindVariableFeatures(object = hsc, selection.method = "vst", nfeatures = 2000)

all.genes <- rownames(hsc)
hsc <- ScaleData(hsc, features = all.genes)
hsc <- RunPCA(hsc, features = VariableFeatures(object = hsc))
hsc <- JackStraw(object = hsc, num.replicate = 100)
hsc <- ScoreJackStraw(object = hsc, dims = 1:10)

hsc <- FindNeighbors(hsc, dims = 1:10)
hsc <- FindClusters(hsc, resolution = 0.8)

#' Clustering with different resolution parameters
resolution_values <- c(0.2, 0.4, 0.6, 0.8, 1.0)  
for (resolution in resolution_values) {
  seurat_object <- FindClusters(hsc, resolution = resolution)
  modularity <- hsc@assays$integrated_modularity_score
  cat("Resolution:", resolution, "\tMaximum Modularity:", max(modularity), "\n")
}
clusterN <- FindClusters(hsc, resolution = seq(0.2,1.6,by=0.2))
clustree(clusterN)

pdf(file="clustree.pdf",width=6.5,height=6)
clustree(clusterN)
dev.off()

#'UMAP
hsc <- RunUMAP(hsc,dims = 1:10, label = T)
write.table(hsc@reductions$umap@cell.embeddings,file="umap.txt",quote=F,sep="\t",col.names=F)
DimPlot(hsc, pt.size =2,label.size =6,reduction = "umap",label = T)

#'T-SNE
hsc <- RunTSNE(hsc,dims = 1:10, label = T)
write.table(hsc@reductions$tsne@cell.embeddings,file="tsne.txt",quote=F,sep="\t",col.names=F)
DimPlot(hsc, pt.size =2,label.size =6,reduction = "tsne",label = T)


h1 <- DimPlot(hsc, group.by = "orig.ident",pt.size =2,label.size =60,reduction = "umap")
h2 <- DimPlot(hsc, group.by = "Group",pt.size =2,label.size =60,reduction = "umap")
h3 <- DimPlot(hsc, group.by = "Mito.dist",pt.size =2,label.size =60,reduction = "umap")

hsc.markers <- FindAllMarkers(hsc, only.pos = TRUE, min.pct = 0.25)
write.table(hsc.markers,file="marker.xls",quote=F,sep="\t",col.names=F)

top_20 <- hsc.markers %>% group_by(cluster) %>% top_n(n = 20, wt = avg_log2FC)
top_50 <- hsc.markers %>% group_by(cluster) %>% top_n(n = 50, wt = avg_log2FC)

dev.new()
DoHeatmap(hsc, features = top_50$gene) + NoLegend()
write.table(top_50 ,file="top_50.xls",quote=F,sep="\t",col.names=F)

top_200 <- hsc.markers %>% group_by(cluster) %>% top_n(n =200, wt = avg_log2FC)
dev.new()
pdf(file="marker_heatmap.pdf",width=124,height=124)
DoHeatmap(hsc, features = top_200$gene) + NoLegend()
dev.off()

#'save
saveRDS(hsc, file = "hsc.rds")







